{
	// Place your cpp 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left_quota empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ACM Template": {
		"prefix": "acm",
		"body": [
			"#include <bits/stdc++.h>",
		    "",
			"using i64 = long long;",
			"using u64 = unsigned long long;",
			"using i128 = __int128;",
			"",
			"typedef std::pair<long long, long long> PII;",
			"const int mod = 998244353;",
			"const int N = static_cast<const int>(2e6+1000);",
			"const int INF = 0x3f3f3f3f;",
			"const long long LINF = 0x3f3f3f3f3f3f3f3f;",
			"const double eps = 1e-6;",
			//"std::mt19937_64_rnd(static_cast<unsigned long long int>(std::chrono::steady_clock::now().time_since_epoch().count()));",
			"",
			"void solve() {",
			"    ",
			"}",
			"",
			"signed main() {",
			"    std::ios::sync_with_stdio(false);",
			"    std::cin.tie(nullptr);",
			"    std::cout.tie(nullptr);",
			"    int t = 1;",
			"    std::cin >> t;",
			"",
			"    while (t--)",
			"        solve();",
			"",
			"    return 0;",
			"}"
		],
		"description": "xcpc Code Template",
	}
}